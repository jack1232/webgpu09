{"version":3,"sources":["webpack://webgpu01/./src/helper.ts","webpack://webgpu01/./src/main.ts","webpack://webgpu01/./src/shaders.ts","webpack://webgpu01/webpack/bootstrap","webpack://webgpu01/webpack/startup"],"names":["CreateGPUBufferUint","device","data","usageFlag","GPUBufferUsage","INDEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Uint32Array","getMappedRange","set","unmap","CreateGPUBuffer","VERTEX","Float32Array","InitGPU","checkgpu","CheckWebGPU","includes","console","log","canvas","document","getElementById","adapter","navigator","gpu","requestAdapter","requestDevice","context","getContext","devicePixelRatio","window","clientWidth","clientHeight","format","getPreferredFormat","configure","result","vertexData","indexData","vertexBuffer","indexBuffer","shader","Shaders","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","loadValue","r","g","b","a","storeOp","setPipeline","setVertexBuffer","setIndexBuffer","drawIndexed","endPass","queue","submit","finish","ShadersOld","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call"],"mappings":"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","file":"main.bundle.js","sourcesContent":["export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \r\n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n    new Uint32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n\r\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \r\n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n    new Float32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n\r\nexport const InitGPU = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter();\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const size = [\r\n        canvas.clientWidth * devicePixelRatio,\r\n        canvas.clientHeight * devicePixelRatio,\r\n    ];\r\n    const format = context.getPreferredFormat(adapter!);\r\n\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n        size: size\r\n    });\r\n    return{ device, canvas, format, context };\r\n};\r\n\r\n/*export const InitGPU = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter();\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('gpupresent') as unknown as GPUCanvasContext;\r\n    const swapChainFormat = 'bgra8unorm';\r\n    const swapChain = context.configureSwapChain({\r\n        device: device,\r\n        format: swapChainFormat\r\n    });\r\n    return{device, canvas, swapChainFormat, swapChain };\r\n}*/\r\n\r\nexport const CheckWebGPU = () => {\r\n    let result = 'Great, your current browser supports WebGPU!';\r\n        if (!navigator.gpu) {\r\n           result = `Your current browser does not support WebGPU! Make sure you are on a system \r\n                     with WebGPU enabled. Currently, SPIR-WebGPU is only supported in  \r\n                     <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\r\n                     with the flag \"enable-unsafe-webgpu\" enabled. See the \r\n                     <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \r\n                     Implementation Status</a> page for more details.                   \r\n                    `;\r\n        } \r\n    return result;\r\n}","import { InitGPU, CreateGPUBuffer, CreateGPUBufferUint } from './helper';\r\nimport { Shaders } from './shaders';\r\n\r\nconst CreateSquare = async () => {\r\n    const gpu = await InitGPU();\r\n    const device = gpu.device;\r\n\r\n    const vertexData = new Float32Array([\r\n        //position    //color\r\n       -0.5, -0.5,    1, 0, 0,  // vertex a, index = 0\r\n        0.5, -0.5,    0, 1, 0,  // vertex b, index = 1\r\n        0.5,  0.5,    0, 0, 1,  // vertex c, index = 2  \r\n       -0.5,  0.5,    1, 1, 0   // vertex d, index = 3        \r\n    ]);\r\n\r\n    const indexData = new Uint32Array([0, 1, 3, 3, 1, 2]);\r\n   \r\n    const vertexBuffer = CreateGPUBuffer(device, vertexData);\r\n    const indexBuffer = CreateGPUBufferUint(device, indexData);\r\n    \r\n    const shader = Shaders();\r\n    const pipeline = device.createRenderPipeline({\r\n        vertex: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.vertex\r\n            }),\r\n            entryPoint: \"main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride: 4*(2+3),\r\n                    attributes: [{\r\n                        shaderLocation: 0,\r\n                        format: \"float32x2\",\r\n                        offset: 0\r\n                    },\r\n                    {\r\n                        shaderLocation: 1,                        \r\n                        format: 'float32x3',\r\n                        offset: 8,\r\n                    }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.fragment\r\n            }),\r\n            entryPoint: \"main\",\r\n            targets: [\r\n                {\r\n                    format: gpu.format as GPUTextureFormat\r\n                }\r\n            ]\r\n        },\r\n        primitive:{\r\n            topology: \"triangle-list\",\r\n        }\r\n    });\r\n\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = gpu.context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({\r\n        colorAttachments: [{\r\n            view: textureView,\r\n            loadValue: { r: 0.5, g: 0.5, b: 0.8, a: 1.0 }, //background color\r\n            storeOp: 'store'\r\n        }]\r\n    });\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, vertexBuffer);\r\n    renderPass.setIndexBuffer(indexBuffer, \"uint32\");\r\n\r\n    renderPass.drawIndexed(6);\r\n    renderPass.endPass();\r\n\r\n    device.queue.submit([commandEncoder.finish()]);\r\n}\r\n\r\nCreateSquare();\r\n\r\n\r\n\r\n\r\n","export const Shaders = () => {\r\n    const vertex = `\r\n        struct Output {\r\n            [[builtin(position)]] Position : vec4<f32>;\r\n            [[location(0)]] vColor : vec4<f32>;\r\n        };\r\n        [[stage(vertex)]]\r\n        fn main([[location(0)]] pos: vec4<f32>, [[location(1)]] color: vec4<f32>) -> Output {\r\n            var output: Output;\r\n            output.Position = pos;\r\n            output.vColor = color;\r\n            return output;\r\n        }`;\r\n\r\n    const fragment = `\r\n        [[stage(fragment)]]\r\n        fn main([[location(0)]] vColor: vec4<f32>) -> [[location(0)]] vec4<f32> {\r\n            return vColor;\r\n        }`;\r\n\r\n    return {\r\n        vertex, \r\n        fragment\r\n    };\r\n}\r\n\r\nexport const ShadersOld = () => {\r\n    const vertex = `\r\n        [[location(0)]] var<in> position : vec4<f32>;\r\n        [[location(1)]] var<in> color : vec4<f32>;\r\n        [[builtin(position)]] var<out> Position : vec4<f32>;\r\n        [[location(0)]] var<out> vColor : vec4<f32>;\r\n\r\n        [[stage(vertex)]]\r\n        fn main() -> void {\r\n            Position = position;\r\n            vColor = color;\r\n            return;\r\n        }`;\r\n\r\n    const fragment = `\r\n        [[location(0)]] var<in> vColor : vec4<f32>;\r\n        [[location(0)]] var<out> fragColor : vec4<f32>;\r\n\r\n        [[stage(fragment)]]\r\n        fn main() -> void {\r\n            fragColor = vColor;\r\n            return;\r\n        }`;\r\n\r\n    return {\r\n        vertex, \r\n        fragment\r\n    };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}